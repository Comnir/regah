import java.nio.file.Paths

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id "net.ltgt.errorprone" version "0.6.1" // static analysis
    id 'org.unbroken-dome.test-sets' version '1.4.5' // configure different test sets
}

group 'com.jefferson'
version '1.0-SNAPSHOT'

apply plugin: 'application'
apply plugin: 'idea'

idea {
    module {
        downloadJavadoc = true
    }
}

sourceCompatibility = 1.9
ext.junitJupiterVersion  = '5.0.3'
mainClassName = 'com.jefferson.regah.Application'

repositories {
    // repository for changed libraries
    maven { url 'https://github.com/Comnir/regah/raw/maven-repository' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

testSets {
    acceptanceTest
}

test {
    useJUnitPlatform()
}
acceptanceTest {
    useJUnitPlatform()
}

compileJava {
    options.incremental = true
}

dependencies {
    errorprone("com.google.errorprone:error_prone_core:2.3.2")
    compile 'org.apache.logging.log4j:log4j-api:2.9.1'
    compile 'org.apache.logging.log4j:log4j-core:2.9.1'
    compile 'com.google.code.gson:gson:2.8.2'
    compile 'com.jefferson.revised.turn:ttorrent-core:1.6-4'
    compile group: 'org.java-websocket', name: 'Java-WebSocket', version: '1.3.9'

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    acceptanceTestImplementation("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testCompile 'org.mockito:mockito-core:2.23.0'
    testCompile 'io.rest-assured:rest-assured:3.0.7'

    if (gradle.ext.ttorrentFromSource) {
    // sl4j-simple is required by ttorrent's logger. Without it, logging is missing for ttorrent
    // and the following error is printed:
    // 'SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".'
        testCompile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
    }

    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
}

task copyLibs(type: Copy)  {
    from configurations.compile
    into('libs')
}

task copyPreCommitHook(type: Copy) {
    from Paths.get(rootDir as String, "hooks", "pre-commit")
    into Paths.get(rootDir as String, ".git", "hooks")
    fileMode 0777
}

build.dependsOn copyPreCommitHook